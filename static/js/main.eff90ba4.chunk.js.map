{"version":3,"sources":["comoonents/SingUpForm/SingUpForm.module.css","App.module.css","comoonents/Contact/ContactListItem/ContactItem.module.css","comoonents/Filter/Filter.module.css","comoonents/Transition/fade.module.css","comoonents/Alert/Alert.module.css","comoonents/Transition/slide.module.css","comoonents/Contact/ContactList.module.css","comoonents/Transition/pop.module.css","comoonents/Alert/Alert.js","comoonents/SingUpForm/SingUpForm.js","comoonents/Contact/ContactListItem/ContactItem.js","comoonents/Contact/ContactList.js","comoonents/Filter/Filter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Alert","className","style","alert","SingUpForm","state","name","number","isAlert","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","contacts","map","contact","includes","setTimeout","reset","human","id","uuidv4","getContact","this","CSSTransition","in","timeout","classNames","slideTransition","unmountOnExit","onSubmit","styles","label","ntmlfor","loginInputId","input","type","onChange","minLength","placeholder","button","Component","ContactItem","onDeleteContact","item","onClick","ContactList","TransitionGroup","component","list","key","popTransition","Filter","onChangeFilter","length","tittle","inputt","App","filter","isOpen","changeFilter","handleGetContact","prev","deleteContact","localStorageContacts","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","filteredContacts","toLowerCase","filterContactsWithQuery","container","fadeTransition","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eff90ba4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"SingUpForm_label__3yqtz\",\"input\":\"SingUpForm_input__3NdNy\",\"button\":\"SingUpForm_button__O_B_t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3UUFL\",\"title\":\"App_title__3HYoh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__2pdDv\",\"button\":\"ContactItem_button__2iR-f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tittle\":\"Filter_tittle__1wUTs\",\"inputt\":\"Filter_inputt__15jjX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__3HaDn\",\"enterActive\":\"fade_enterActive__3ExTr\",\"exit\":\"fade_exit__-ifr4\",\"exitActive\":\"fade_exitActive__3w6ue\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Alert_alert__30bpV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__VXdj2\",\"enterActive\":\"slide_enterActive__3gQSL\",\"exit\":\"slide_exit__p_P4z\",\"exitActive\":\"slide_exitActive__3zf7g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1SKgZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1aL4S\",\"enterActive\":\"pop_enterActive__dGwSO\",\"exit\":\"pop_exit__2RLmh\",\"exitActive\":\"pop_exitActive__rOCjN\"};","import React from 'react';\r\nimport style from './Alert.module.css';\r\n\r\nconst Alert = () => <h2 className={style.alert}>Contact already exists!</h2>;\r\n\r\nexport default Alert;\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './SingUpForm.module.css';\r\nimport Alert from '../Alert/Alert';\r\nimport slideTransition from '../Transition/slide.module.css';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class SingUpForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    isAlert: false,\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = e.target;\r\n    const repeatName = this.props.contacts.map(contact => contact.name);\r\n    if (!repeatName.includes(e.target.name.value)) {\r\n      const human = { id: uuidv4(), name: name.value, number: number.value };\r\n      this.props.getContact(human);\r\n      this.reset();\r\n    } else {\r\n      this.setState({ isAlert: true });\r\n      setTimeout(() => {\r\n        this.reset();\r\n      }, 3000);\r\n      // alert(`${name.value} is already in contacts`);\r\n      // this.reset();\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n      isAlert: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, isAlert } = this.state;\r\n    return (\r\n      <>\r\n        <CSSTransition\r\n          in={isAlert}\r\n          timeout={500}\r\n          classNames={slideTransition}\r\n          unmountOnExit>\r\n          <Alert />\r\n        </CSSTransition>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label className={styles.label} ntmlfor={this.loginInputId}>\r\n            Name\r\n            <input\r\n              className={styles.input}\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n              minLength=\"3\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n          </label>\r\n          <br />\r\n          <label className={styles.label} ntmlfor={this.loginInputId}>\r\n            Number\r\n            <input\r\n              className={styles.input}\r\n              type=\"number\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              name=\"number\"\r\n              minLength=\"5\"\r\n              placeholder=\"Enter telephon number\"\r\n            />\r\n          </label>\r\n\r\n          <button className={styles.button} type=\"submit\">\r\n            Add contact {name}\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nSingUpForm.propTypes = {\r\n  getContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactItem.module.css';\n\nconst ContactItem = ({ contact, onDeleteContact = () => null }) => {\n  return (\n    <>\n      <li className={styles.item}>\n        {contact.name} : {contact.number}\n        <button\n          className={styles.button}\n          type=\"button\"\n          id={contact.id}\n          onClick={onDeleteContact}>\n          Delete\n        </button>\n      </li>\n    </>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  contact: PropTypes.object,\n};\n","import React from 'react';\nimport ContactItem from './ContactListItem/ContactItem';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport popTransition from '../Transition/pop.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <TransitionGroup component=\"ul\" className={styles.list}>\n      {/* {' '} */}\n      {contacts.map(contact => (\n        <CSSTransition\n          key={contact.id}\n          timeout={250}\n          unmountOnExit\n          classNames={popTransition}>\n          <ContactItem\n            contact={contact}\n            key={contact.id}\n            onDeleteContact={() => onDeleteContact(contact.id)}\n          />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ contacts, value, onChangeFilter }) =>\r\n  contacts.length >= 2 && (\r\n    <>\r\n      <h3 className={styles.tittle}>Find contact by name:</h3>,\r\n      <input\r\n        className={styles.inputt}\r\n        type=\"search\"\r\n        value={value}\r\n        onChange={onChangeFilter}\r\n        placeholder=\"Find name\"\r\n      />\r\n    </>\r\n  );\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  value: PropTypes.string,\r\n};\r\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport SingUpForm from './comoonents/SingUpForm/SingUpForm';\nimport ContactList from './comoonents/Contact/ContactList';\nimport Filter from './comoonents/Filter/Filter';\nimport styles from './App.module.css';\nimport fadeTransition from './comoonents/Transition/fade.module.css';\n\nconst filterContactsWithQuery = (contacts, filter) => {\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n\n    filter: '',\n    isOpen: false,\n  };\n\n  componentDidMount() {\n    this.setState({\n      isOpen: true,\n    });\n    const localStorageContacts = localStorage.getItem('contacts');\n    if (localStorageContacts) {\n      this.setState({ contacts: JSON.parse(localStorageContacts) });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  handleGetContact = contact => {\n    this.setState(prev => ({\n      contacts: [...prev.contacts, contact],\n    }));\n  };\n\n  deleteContact = id => {\n    this.setState(state => ({\n      contacts: state.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  render() {\n    const { contacts, filter, isOpen } = this.state;\n    const filteredContacts = filterContactsWithQuery(contacts, filter);\n\n    return (\n      <div className={styles.container}>\n        <CSSTransition\n          in={isOpen}\n          timeout={500}\n          classNames={fadeTransition}\n          unmountOnExit>\n          <h2 className={styles.title}>Phonebook</h2>\n        </CSSTransition>\n        <SingUpForm getContact={this.handleGetContact} contacts={contacts} />\n        <h2 className={styles.title}>Contacts</h2>\n        <CSSTransition\n          in={isOpen}\n          timeout={500}\n          classNames={fadeTransition}\n          unmountOnExit>\n          <Filter\n            contacts={contacts}\n            value={filter}\n            onChangeFilter={this.changeFilter}\n          />\n        </CSSTransition>\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}